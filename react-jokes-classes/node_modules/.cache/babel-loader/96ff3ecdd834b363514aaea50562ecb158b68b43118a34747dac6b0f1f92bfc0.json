{"ast":null,"code":"var _jsxFileName = \"/Users/cory/Documents/Google Drive/Coding/Javascript/Springboard/Exercises/react-jokes-classes/src/JokeList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Joke from \"./Joke\";\nimport \"./JokeList.css\";\n\n/** List of jokes. */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JokeList = ({\n  numJokesToGet\n}) => {\n  _s();\n  const [jokes, setJokes] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  /* at mount, get jokes */\n\n  useEffect(() => {\n    getJokes();\n  }, []);\n\n  /* retrieve jokes from API */\n\n  async function getJokes() {\n    try {\n      // load jokes one at a time, adding not-yet-seen jokes\n      let jokes = [];\n      let seenJokes = new Set();\n      while (jokes.length < numJokesToGet) {\n        let res = await axios.get(\"https://icanhazdadjoke.com\", {\n          headers: {\n            Accept: \"application/json\"\n          }\n        });\n        let {\n          ...joke\n        } = res.data;\n        if (!seenJokes.has(joke.id)) {\n          seenJokes.add(joke.id);\n          jokes.push({\n            ...joke,\n            votes: 0\n          });\n        } else {\n          console.log(\"duplicate found!\");\n        }\n      }\n      setJokes({\n        jokes\n      });\n      setIsLoading(false);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  /* empty joke list, set to loading state, and then call getJokes */\n\n  function generateNewJokes() {\n    setJokes([]);\n    setIsLoading(true);\n    getJokes();\n  }\n\n  /* change vote for this id by delta (+1 or -1) */\n\n  function vote(id, delta) {\n    setJokes(st => ({\n      jokes: st.jokes.map(j => j.id === id ? {\n        ...j,\n        votes: j.votes + delta\n      } : j)\n    }));\n  }\n\n  /* render: either loading spinner or list of sorted jokes. */\n\n  const sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-4x fa-spinner fa-spin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"JokeList\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"JokeList-getmore\",\n      onClick: generateNewJokes,\n      children: \"Get New Jokes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this), sortedJokes.map(j => /*#__PURE__*/_jsxDEV(Joke, {\n      text: j.joke,\n      id: j.id,\n      votes: j.votes,\n      vote: vote\n    }, j.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 7\n  }, this);\n};\n_s(JokeList, \"+iu6xHPOscTV/FNdMPqy/q1M2A4=\");\n_c = JokeList;\nJokeList.defaultProps = {\n  numJokesToGet: 5\n};\nexport default JokeList;\nvar _c;\n$RefreshReg$(_c, \"JokeList\");","map":{"version":3,"names":["React","useState","useEffect","axios","Joke","jsxDEV","_jsxDEV","JokeList","numJokesToGet","_s","jokes","setJokes","isLoading","setIsLoading","getJokes","seenJokes","Set","length","res","get","headers","Accept","joke","data","has","id","add","push","votes","console","log","err","error","generateNewJokes","vote","delta","st","map","j","sortedJokes","sort","a","b","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","text","_c","defaultProps","$RefreshReg$"],"sources":["/Users/cory/Documents/Google Drive/Coding/Javascript/Springboard/Exercises/react-jokes-classes/src/JokeList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Joke from \"./Joke\";\nimport \"./JokeList.css\";\n\n/** List of jokes. */\n\nconst JokeList = ({numJokesToGet}) => {\n  const [jokes, setJokes] = useState([])\n  const [isLoading, setIsLoading] = useState(true)\n\n  /* at mount, get jokes */\n\n  useEffect(() => {\n    getJokes()}, [])\n\n  /* retrieve jokes from API */\n\n  async function getJokes() {\n    try {\n      // load jokes one at a time, adding not-yet-seen jokes\n      let jokes = [];\n      let seenJokes = new Set();\n\n      while (jokes.length < numJokesToGet) {\n        let res = await axios.get(\"https://icanhazdadjoke.com\", {\n          headers: { Accept: \"application/json\" }\n        });\n        let { ...joke } = res.data;\n\n        if (!seenJokes.has(joke.id)) {\n          seenJokes.add(joke.id);\n          jokes.push({ ...joke, votes: 0 });\n        } else {\n          console.log(\"duplicate found!\");\n        }\n      }\n\n      setJokes({ jokes });\n      setIsLoading(false);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  /* empty joke list, set to loading state, and then call getJokes */\n\n  function generateNewJokes() {\n    setJokes([]);\n    setIsLoading(true)\n    getJokes();\n  }\n\n  /* change vote for this id by delta (+1 or -1) */\n\n  function vote(id, delta) {\n    setJokes(st => ({\n      jokes: st.jokes.map(j =>\n        j.id === id ? { ...j, votes: j.votes + delta } : j\n      )\n    }));\n  }\n\n  /* render: either loading spinner or list of sorted jokes. */\n\n    const sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n    if (isLoading) {\n      return (\n        <div className=\"loading\">\n          <i className=\"fas fa-4x fa-spinner fa-spin\" />\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"JokeList\">\n        <button\n          className=\"JokeList-getmore\"\n          onClick={generateNewJokes}\n        >\n          Get New Jokes\n        </button>\n\n        {sortedJokes.map(j => (\n          <Joke\n            text={j.joke}\n            key={j.id}\n            id={j.id}\n            votes={j.votes}\n            vote={vote}\n          />\n        ))}\n      </div>\n    );\n}\n\nJokeList.defaultProps = {\n  numJokesToGet: 5\n}\nexport default JokeList\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}