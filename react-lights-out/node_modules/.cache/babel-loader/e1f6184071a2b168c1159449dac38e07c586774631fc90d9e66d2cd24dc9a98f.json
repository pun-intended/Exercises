{"ast":null,"code":"var _jsxFileName = \"/Users/cory/Documents/Google Drive/Coding/Javascript/Springboard/Exercises/react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows,\n  ncols,\n  chanceLightStartsOn\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for (let i = 0; i < nrows; i++) {\n      let row = [];\n      for (let j = 0; j < ncols; j++) {\n        row.push(Math.random() < chanceLightStartsOn);\n      }\n      initialBoard.push(row);\n    }\n    console.log(initialBoard);\n    return initialBoard;\n  }\n  function hasWon() {\n    console.log(\"Calling hasWon\");\n    // TODO: check the board in state to determine whether the player has won.\n    const winState = board.every(row => row.every(c => c === false));\n    console.log(winState);\n    return winState;\n  }\n  function flipCellsAround(coord) {\n    console.log(\"Calling flip cells around\");\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n      let newBoard = JSON.parse(JSON.stringify(board));\n      flipCell(y, x, newBoard);\n      flipCell(y + 1, x, newBoard);\n      flipCell(y, x + 1, newBoard);\n      flipCell(y - 1, x, newBoard);\n      flipCell(y, x - 1, newBoard);\n      return newBoard;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n  let colIdx = 0;\n  let rowIdx = 0;\n  if (hasWon()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"YOU WIN!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [\"Making Board\", board.map(row => {\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [row.map(c => {\n            // TODO - use for loop to get cell index?\n            cell = /*#__PURE__*/_jsxDEV(Cell, {\n              flipCellsAroundMe: () => {\n                return flipCellsAround(`${rowIdx}-${colIdx}`);\n              },\n              isLit: c\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 22\n            }, this);\n            {\n              colIdx++;\n            }\n            return cell;\n          }), rowIdx++]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this);\n  }\n  // make table board\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","initialBoard","i","row","j","push","Math","random","console","log","hasWon","winState","every","c","flipCellsAround","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy","newBoard","JSON","parse","stringify","colIdx","rowIdx","children","fileName","_jsxFileName","lineNumber","columnNumber","cell","flipCellsAroundMe","isLit","_c","$RefreshReg$"],"sources":["/Users/cory/Documents/Google Drive/Coding/Javascript/Springboard/Exercises/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for(let i = 0; i < nrows; i++){\n      let row = []\n      for (let j = 0; j < ncols; j++){\n        row.push(Math.random() < chanceLightStartsOn)\n      }\n      initialBoard.push(row)\n    }\n    console.log(initialBoard)\n    return initialBoard;\n  }\n\n  function hasWon() {\n    console.log(\"Calling hasWon\")\n    // TODO: check the board in state to determine whether the player has won.\n    const winState = board.every(row => row.every(c => c === false))\n    console.log(winState)\n    return winState;\n  }\n\n  function flipCellsAround(coord) {\n    console.log(\"Calling flip cells around\")\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      let newBoard = JSON.parse(JSON.stringify(board))\n\n      flipCell(y, x, newBoard)\n      flipCell(y+1, x, newBoard)\n      flipCell(y, x+1, newBoard)\n      flipCell(y-1, x, newBoard)\n      flipCell(y, x-1, newBoard)\n\n      return newBoard\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n  let colIdx = 0;\n  let rowIdx = 0;\n  if(hasWon()){\n    return(\n      <div>\n        YOU WIN!\n      </div>\n    )\n  } else {\n    return (\n      <table>\n        Making Board\n        {board.map( (row) => {\n          return(\n            <tr>\n            {row.map((c) => {\n              // TODO - use for loop to get cell index?\n              cell = <Cell flipCellsAroundMe={() => \n                {return (flipCellsAround(`${rowIdx}-${colIdx}`))}}\n                isLit={c} />\n              {colIdx++}\n                return( cell )}\n               )}\n             {rowIdx++}\n            </tr>\n          )})\n        }\n    </table>\n    )\n  }\n  // make table board\n\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}