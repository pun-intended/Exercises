{"ast":null,"code":"var _jsxFileName = \"/Users/cory/Documents/Google Drive/Coding/Javascript/Springboard/Exercises/react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows,\n  ncols,\n  chanceLightStartsOn\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for (let row in nrows) {\n      for (let col in ncols) {\n        initialBoard[col].push(Math.random() < chanceLightStartsOn);\n      }\n    }\n    return initialBoard;\n  }\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    const winState = board.every(row => row.every(c => c === false));\n    return winState;\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      let newBoard = JSON.parse(JSON.stringify(board));\n\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x, newBoard);\n      flipCell(y + 1, x, newBoard);\n      flipCell(y, x + 1, newBoard);\n      flipCell(y - 1, x, newBoard);\n      flipCell(y, x - 1, newBoard);\n\n      // TODO: return the copy\n      return newBoard;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n  if (hasWon()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"YOU WIN!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [board.map(row => {\n        return row.map(cell => {\n          return /*#__PURE__*/_jsxDEV(Cell, {\n            flipCellsAroundMe: () => {\n              return flipCellsAround(`${row}-${cell}`);\n            },\n            isLit: board[row][cell]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this);\n        });\n      }), \"for(let row in board)\", /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: \"for(let cell in row)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this);\n  }\n  // make table board\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","initialBoard","row","col","push","Math","random","hasWon","winState","every","c","flipCellsAround","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy","newBoard","JSON","parse","stringify","children","fileName","_jsxFileName","lineNumber","columnNumber","cell","flipCellsAroundMe","isLit","_c","$RefreshReg$"],"sources":["/Users/cory/Documents/Google Drive/Coding/Javascript/Springboard/Exercises/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for(let row in nrows){\n      for (let col in ncols){\n        initialBoard[col].push(Math.random() < chanceLightStartsOn)\n      }\n    }\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    const winState = board.every(row => row.every(c => c === false))\n    return winState;\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      let newBoard = JSON.parse(JSON.stringify(board))\n\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x, newBoard)\n      flipCell(y+1, x, newBoard)\n      flipCell(y, x+1, newBoard)\n      flipCell(y-1, x, newBoard)\n      flipCell(y, x-1, newBoard)\n\n      // TODO: return the copy\n      return newBoard\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n  if(hasWon()){\n    return(\n      <div>\n        YOU WIN!\n      </div>\n    )\n  } else {\n    return (\n      <div>\n      {board.map((row) => {\n        return (\n          row.map(cell => {\n            return(\n            <Cell \n            flipCellsAroundMe={() => {return flipCellsAround(`${row}-${cell}`)}} \n            isLit={board[row][cell]} />\n            )\n        }))\n  })}\n      for(let row in board){\n        <tr>\n          for(let cell in row){\n            \n          }\n        </tr>\n      }\n    </div>\n    )\n  }\n  // make table board\n\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}