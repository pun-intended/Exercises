{"ast":null,"code":"var _jsxFileName = \"/Users/cory/Documents/Google Drive/Coding/Javascript/Springboard/Exercises/react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows,\n  ncols,\n  chanceLightStartsOn\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    let cells = [];\n    for (let i = 0; i < nrows; i++) {\n      let row = [];\n      for (let j = 0; j < ncols; j++) {\n        row.push(Math.random() < chanceLightStartsOn);\n      }\n      initialBoard.push(row);\n    }\n    return initialBoard;\n  }\n  function createCells(board) {\n    let cellArray = [];\n    for (let row in board) {\n      cellArray[row] = [];\n      console.log(row);\n      for (let col in row) {\n        cellArray[row][col] = /*#__PURE__*/_jsxDEV(Cell, {\n          flipCellsAroundMe: () => {\n            return flipCellsAround(`${row}-${col}`);\n          },\n          isLit: board[row][col]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 33\n        }, this);\n      }\n    }\n    return cellArray;\n  }\n  function hasWon() {\n    console.log(\"Calling hasWon\");\n    // TODO: check the board in state to determine whether the player has won.\n    const winState = board.every(row => row.every(c => c === false));\n    console.log(winState);\n    return winState;\n  }\n  function flipCellsAround(coord) {\n    console.log(\"Calling flip cells around\");\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n      let newBoard = JSON.parse(JSON.stringify(board));\n      flipCell(y, x, newBoard);\n      flipCell(y + 1, x, newBoard);\n      flipCell(y, x + 1, newBoard);\n      flipCell(y - 1, x, newBoard);\n      flipCell(y, x - 1, newBoard);\n      return newBoard;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n  let cells = createCells(board);\n  if (hasWon()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"YOU WIN!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this);\n  } else {\n    return cells\n    // <table>\n    //   Making Board\n    //   {cells.map((row) => {\n    //     return(\n    //       <tr>\n    //         {row.map((cell) => {\n    //           return(\n    //             cell\n    //           )\n    //         })}\n    //       </tr> \n    //     )\n    //   })}\n    // </table>\n    ;\n  }\n  // make table board\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","initialBoard","cells","i","row","j","push","Math","random","createCells","cellArray","console","log","col","flipCellsAroundMe","flipCellsAround","isLit","fileName","_jsxFileName","lineNumber","columnNumber","hasWon","winState","every","c","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy","newBoard","JSON","parse","stringify","children","_c","$RefreshReg$"],"sources":["/Users/cory/Documents/Google Drive/Coding/Javascript/Springboard/Exercises/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    let cells = []\n    for(let i = 0; i < nrows; i++){\n      let row = []\n      for (let j = 0; j < ncols; j++){\n        row.push(Math.random() < chanceLightStartsOn)\n      }\n      initialBoard.push(row)\n    }\n    return initialBoard;\n  }\n\n  function createCells(board){\n    let cellArray = []\n      for(let row in board){\n        cellArray[row] = []\n        console.log(row)\n        for(let col in row) {\n          cellArray[row][col] = <Cell flipCellsAroundMe={() => \n            {return (flipCellsAround(`${row}-${col}`))}}\n            isLit={board[row][col]} />\n        }\n      }\n      return cellArray;\n  }\n\n  function hasWon() {\n    console.log(\"Calling hasWon\")\n    // TODO: check the board in state to determine whether the player has won.\n    const winState = board.every(row => row.every(c => c === false))\n    console.log(winState)\n    return winState;\n  }\n\n  function flipCellsAround(coord) {\n    console.log(\"Calling flip cells around\")\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      let newBoard = JSON.parse(JSON.stringify(board))\n\n      flipCell(y, x, newBoard)\n      flipCell(y+1, x, newBoard)\n      flipCell(y, x+1, newBoard)\n      flipCell(y-1, x, newBoard)\n      flipCell(y, x-1, newBoard)\n\n      return newBoard\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n  let cells = createCells(board)\n  if(hasWon()){\n    return(\n      <div>\n        YOU WIN!\n      </div>\n    )\n  } else {\n    return (\n      cells\n      // <table>\n      //   Making Board\n      //   {cells.map((row) => {\n      //     return(\n      //       <tr>\n      //         {row.map((cell) => {\n      //           return(\n      //             cell\n      //           )\n      //         })}\n      //       </tr> \n      //     )\n      //   })}\n      // </table>\n    )\n  }\n  // make table board\n\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}